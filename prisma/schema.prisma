// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  bio           String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  hobbies       UserHobby[]
  sentMessages  Message[]    @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  sentLoveNotes LoveNote[]   @relation("SentLoveNotes")
  receivedLoveNotes LoveNote[] @relation("ReceivedLoveNotes")
  followers     Follow[]     @relation("Followers")
  following     Follow[]     @relation("Following")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Hobby {
  id          String      @id @default(cuid())
  name        String      @unique
  users       UserHobby[]
}

model UserHobby {
  id          String    @id @default(cuid())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  hobby       Hobby     @relation(fields: [hobbyId], references: [id], onDelete: Cascade)
  hobbyId     String

  @@unique([userId, hobbyId])
}

model Message {
  id          String    @id @default(cuid())
  content     String
  createdAt   DateTime  @default(now())
  read        Boolean   @default(false)
  
  sender      User      @relation("SentMessages", fields: [senderId], references: [id])
  senderId    String
  recipient   User      @relation("ReceivedMessages", fields: [recipientId], references: [id])
  recipientId String
}

model LoveNote {
  id          String    @id @default(cuid())
  question    String
  senderAnswer String?
  recipientAnswer String?
  createdAt   DateTime  @default(now())
  
  sender      User      @relation("SentLoveNotes", fields: [senderId], references: [id])
  senderId    String
  recipient   User      @relation("ReceivedLoveNotes", fields: [recipientId], references: [id])
  recipientId String
}

model Follow {
  id          String    @id @default(cuid())
  follower    User      @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  String
  following   User      @relation("Followers", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String
  createdAt   DateTime  @default(now())

  @@unique([followerId, followingId])
}
